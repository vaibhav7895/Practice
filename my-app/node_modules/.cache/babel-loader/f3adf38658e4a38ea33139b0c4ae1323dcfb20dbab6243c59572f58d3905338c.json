{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\react\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [timer, setTimer] = useState(0); // Timer state in seconds\n  const [inputTime, setInputTime] = useState(\"\"); // Input time state\n  const [running, setRunning] = useState(false); // Running state to control start/stop\n\n  // Function to format the time from seconds to HH:MM:SS\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // useEffect to handle the timer interval\n  useEffect(() => {\n    let timerInterval = null; // Variable to hold the interval ID\n\n    if (running) {\n      // If the timer is running, start the interval\n      timerInterval = setInterval(() => {\n        setTimer(previous => previous + 1); // Increment timer every second\n      }, 1000);\n    } else if (!running && timerInterval) {\n      // If stopped, clear the interval\n      clearInterval(timerInterval);\n    }\n\n    // Cleanup function to clear interval when component unmounts or running state changes\n    return () => {\n      clearInterval(timerInterval);\n    };\n  }, [running]); // Dependency array with running state\n\n  // Function to handle the reset button\n  const handleReset = () => {\n    setTimer(0); // Reset timer to 0\n    setRunning(false); // Stop the timer\n  };\n\n  // Function to toggle the start/stop button\n  const toggleRunning = () => {\n    setRunning(!running); // Toggle the running state\n  };\n\n  // Function to set the timer from input\n  const setTimerinput = () => {\n    const parts = inputTime.split(':').map(Number); // Split input into parts\n    if (parts.length === 3) {\n      const totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2]; // Calculate total seconds\n      setTimer(totalSeconds); // Set the timer state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: formatTime(timer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRunning,\n      className: \"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\",\n      children: [running ? 'Stop' : 'Start', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      className: \"bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\",\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"HH:MM:SS\",\n        value: inputTime,\n        onChange: e => setInputTime(e.target.value),\n        className: \"border border-gray-300 rounded px-2 py-1 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setTimerinput,\n        className: \"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\",\n        children: \"Set Timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VzFMqUZ1HMAZqBSimKhthLJuv+c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","timer","setTimer","inputTime","setInputTime","running","setRunning","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","timerInterval","setInterval","previous","clearInterval","handleReset","toggleRunning","setTimerinput","parts","split","map","Number","length","totalSeconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/react/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [timer, setTimer] = useState(0); // Timer state in seconds\n  const [inputTime, setInputTime] = useState(\"\"); // Input time state\n  const [running, setRunning] = useState(false); // Running state to control start/stop\n\n  // Function to format the time from seconds to HH:MM:SS\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    return `${hours.toString().padStart(2, '0')}:${minutes\n      .toString()\n      .padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // useEffect to handle the timer interval\n  useEffect(() => {\n    let timerInterval = null; // Variable to hold the interval ID\n\n    if (running) { // If the timer is running, start the interval\n      timerInterval = setInterval(() => {\n        setTimer((previous) => previous + 1); // Increment timer every second\n      }, 1000);\n    } else if (!running && timerInterval) { // If stopped, clear the interval\n      clearInterval(timerInterval);\n    }\n\n    // Cleanup function to clear interval when component unmounts or running state changes\n    return () => {\n      clearInterval(timerInterval);\n    };\n  }, [running]); // Dependency array with running state\n\n  // Function to handle the reset button\n  const handleReset = () => {\n    setTimer(0); // Reset timer to 0\n    setRunning(false); // Stop the timer\n  };\n\n  // Function to toggle the start/stop button\n  const toggleRunning = () => {\n    setRunning(!running); // Toggle the running state\n  };\n\n  // Function to set the timer from input\n  const setTimerinput = () => {\n    const parts = inputTime.split(':').map(Number); // Split input into parts\n    if (parts.length === 3) {\n      const totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2]; // Calculate total seconds\n      setTimer(totalSeconds); // Set the timer state\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{formatTime(timer)}</h1>\n      <button onClick={toggleRunning} className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\n        {running ? 'Stop' : 'Start'} {/* Toggle between start and stop */}\n      </button>\n      <button onClick={handleReset} className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\">\n        Reset\n      </button>\n      <div className=\"mt-4\">\n        <input\n          type=\"text\"\n          placeholder=\"HH:MM:SS\"\n          value={inputTime}\n          onChange={(e) => setInputTime(e.target.value)}\n          className=\"border border-gray-300 rounded px-2 py-1 mr-2\"\n        />\n        <button\n          onClick={setTimerinput}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\"\n        >\n          Set Timer\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}